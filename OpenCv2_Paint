
# OpenCv2 Paint
# A BigBogeyFace and Keith Lohmeyer Collaboration

# Importing Essentials:
import cv2
import mediapipe
import numpy
import time
import os

# Window Setup:
Frame__Width=1280
Frame_Height=720

# Canvas Setup:
Canvas_Top_Left_X=int(Frame__Width*.001)
Canvas_Top_Left_Y=int(Frame_Height*.102)
Canvas_Bottom_Right_X=int(Frame__Width*.929)
Canvas_Bottom_Right_Y=int(Frame_Height*.88)

# Global Variables:
Brush_Colour=10
Real_Brush=2
Font=cv2.FONT_HERSHEY_SIMPLEX
Left_Data_Weight=.2
Draw_Average=0
Draw_Boolean=0
Right_Data_Weight=.4
Brush_Average_X_Position=0
Brush_Average_Y_Position=0
Brush_Position_X=0
Brush_Position_Y=0
Border_Thickness=3
Text_Thickness=2
Solid=-1
Indicator_Thickness=2

# Colours:
Purple=(255,0,255)
Red=(0,0,255)
Orange=(0,100,255)
Yellow=(0,255,255)
Brown=(100,255,160)
Green=(0,255,0)
Blue=(255,0,0)
Light_Blue=(255,100,0)
Cyan=(255,255,0)
White=(255,255,255)
Rubber=(0,0,0)

# Colour Pallet:
Colour_Pallet=[Purple,Red,Orange,Yellow,Brown,Green,Blue,Light_Blue,Cyan,White,Rubber]

# Brush Status Text:
Brush_Status=['Brush Up','Brush Down']

# Brush Radius Increment Value:
Brush_Radius=int(Frame__Width*.004)

# Hand Detection Class:
class Mediapipe_Array:
    def __init__(self):
        self.Hands=mediapipe.solutions.hands.Hands(False,2,.5,.5)
        self.Draw=mediapipe.solutions.drawing_utils

    # Find Landmarks Method:
    def Find_LandMarks(self,Image,Do_Draw):
        Frame=Image
        Height,Width,c=Frame.shape
        Frame_RGB=cv2.cvtColor(Frame,cv2.COLOR_BGR2RGB)
        Hand_Results=self.Hands.process(Frame_RGB)
        Hands=[]
        Hands_Type=[]
        if Hand_Results.multi_hand_landmarks != None:
            for Hand in Hand_Results.multi_handedness:
                Hands_Type.append(Hand.classification[0].label)
            for Hand_LandMarks in Hand_Results.multi_hand_landmarks:
                myHand=[]
                if Do_Draw==True:
                    self.Draw.draw_landmarks(Frame,Hand_LandMarks,mediapipe.solutions.hands.HAND_CONNECTIONS)
                for LandMark in Hand_LandMarks.landmark:
                    myHand.append((int(LandMark.x*Width),int(LandMark.y*Height)))
                Hands.append(myHand)              
        return Hands,Hands_Type 

# Landmarks Object:
LandMarks_Object= Mediapipe_Array()

# Camera Setup:
Camera=cv2.VideoCapture(0,cv2.CAP_DSHOW)
Camera.set(cv2.CAP_PROP_FRAME_WIDTH,Frame__Width)
Camera.set(cv2.CAP_PROP_FRAME_HEIGHT,Frame_Height)
Camera.set(cv2.CAP_PROP_FPS, 30)

# Generate Display Window:
cv2.namedWindow('OpenCv2_Paint')
Canvas=numpy.zeros([Frame_Height,Frame__Width,3],dtype=numpy.uint8)

# Initialise Fps Timer:
tLast=time.time()
fpsFilt=15
time.sleep(.1)

# Initialise Play State:
Play=False
End_Credits=False
GameOver=False

# Credit Counters:
Text_Height_Zero=1
Text_Height_One=1
Text_Height_Two=1
Text_Height_Three=1
Text_Height_Four=1
Text_Height_Five=1
Text_Height_Six=1
Text_Height_Seven=1
Text_Height_Eight=1
Text_Height_Nine=1
Text_Height_Ten=1
Text_Height_Eleven=1
Text_Height_Twelve=1

# Begin Program:
while True:

    # Start / Restart Fps Timer:
    dt=time.time()-tLast
    tLast=time.time()
    fps=1/dt
    fpsFilt=fpsFilt*.97+fps*.03

    # Intro Screen:
    if Play == False:
        Text=cv2.putText(Canvas,'OpenCv2',(int(Frame__Width*.041),int(Frame_Height*.42)),Font,Frame_Height*.01,White,Text_Thickness*24)
        Text=cv2.putText(Canvas,'OpenCv2',(int(Frame__Width*.041),int(Frame_Height*.42)),Font,Frame_Height*.01,Cyan,Text_Thickness*18)
        Text=cv2.putText(Canvas,'OpenCv2',(int(Frame__Width*.041),int(Frame_Height*.42)),Font,Frame_Height*.01,Yellow,Text_Thickness*8)
        Text=cv2.putText(Canvas,'Paint',(int(Frame__Width*.041),int(Frame_Height*.77)),Font,Frame_Height*.01,White,Text_Thickness*24)
        Text=cv2.putText(Canvas,'Paint',(int(Frame__Width*.041),int(Frame_Height*.77)),Font,Frame_Height*.01,Purple,Text_Thickness*18)
        Text=cv2.putText(Canvas,'Paint',(int(Frame__Width*.041),int(Frame_Height*.77)),Font,Frame_Height*.01,Red,Text_Thickness*8)
        Text=cv2.putText(Canvas,'Press "P"',(int(Frame__Width*.55),int(Frame_Height*.64)),Font,Frame_Height*.0035,White,Text_Thickness*10)
        Text=cv2.putText(Canvas,'Press "P"',(int(Frame__Width*.55),int(Frame_Height*.64)),Font,Frame_Height*.0035,Green,Text_Thickness*8)
        Text=cv2.putText(Canvas,'Press "P"',(int(Frame__Width*.55),int(Frame_Height*.64)),Font,Frame_Height*.0035,Blue,Text_Thickness*4)
        Text=cv2.putText(Canvas,'To Play',(int(Frame__Width*.55),int(Frame_Height*.78)),Font,Frame_Height*.0035,White,Text_Thickness*10)
        Text=cv2.putText(Canvas,'To Play',(int(Frame__Width*.55),int(Frame_Height*.78)),Font,Frame_Height*.0035,Green,Text_Thickness*8)
        Text=cv2.putText(Canvas,'To Play',(int(Frame__Width*.55),int(Frame_Height*.78)),Font,Frame_Height*.0035,Blue,Text_Thickness*4)

    # Capture Frame:
    Hands=[]
    ignore,Frame=Camera.read()
    Frame=cv2.flip(Frame,1)

    # Generate Clean Frame:
    Clean_Frame=Frame

    # Send Clean_Frame To Find_Landmarks Class:
    Hand_Array,Hand_Left_Or_Right=LandMarks_Object.Find_LandMarks(Clean_Frame,False)

    # If No Hands Are Found:
    if not Hand_Array:
        Draw_Boolean=0

    # If Hands Are Found:
    for LandMarks,Hand_Type in zip(Hand_Array,Hand_Left_Or_Right):

        # If Hand Type Found Is Left:
        if Hand_Type=='Left':

            # If Left Hand Is Open (Weighted Average Applied) - (Round to 0 or 1 at breakpoint .5):
            if (LandMarks[4][0]>LandMarks[3][0] and LandMarks[8][1]<LandMarks[6][1] and LandMarks[12][1]<LandMarks[10][1] and
                    LandMarks[16][1]<LandMarks[14][1] and LandMarks[20][1]<LandMarks[18][1]):
                Draw=1
            else:
                Draw=0
            Draw_Average=(Left_Data_Weight * Draw)+((1 - Left_Data_Weight) * Draw_Average)
            Draw_Boolean=round(Draw_Average)  

        # If Hand Type Found Is Right (Weighted Average Applied):
        if Hand_Type=='Right':
            Brush_Average_X_Position=(Right_Data_Weight * LandMarks[8][0])+((1 - Right_Data_Weight) * Brush_Average_X_Position)
            Brush_Position_X=int(Brush_Average_X_Position)
            Brush_Average_Y_Position=(Right_Data_Weight * LandMarks[8][1])+((1 - Right_Data_Weight) * Brush_Average_Y_Position)
            Brush_Position_Y=int(Brush_Average_Y_Position)

            # If Draw Is True And Brush Is On Canvas:
            if Draw_Boolean:
                if (Canvas_Top_Left_X+Brush_Radius*Real_Brush < Brush_Position_X < Canvas_Bottom_Right_X-Brush_Radius*Real_Brush and
                        Canvas_Top_Left_Y+Brush_Radius*Real_Brush < Brush_Position_Y < Canvas_Bottom_Right_Y-Brush_Radius*Real_Brush): 
                    cv2.circle(Canvas,(Brush_Position_X,Brush_Position_Y),Brush_Radius*Real_Brush,Colour_Pallet[Brush_Colour],Solid)
            else:

                # Brush Size Selection:
                if Brush_Position_X > int(Frame__Width*.93):
                    if int(Frame_Height*.165) < Brush_Position_Y < int(Frame_Height*.8):
                        Real_Brush=int(Brush_Position_Y/Frame_Height/.12)

                # Brush Colour Selection:
                if Brush_Position_Y < int(Frame_Height*.1):                          
                    if 0 < Brush_Position_X < int(Frame__Width*.88):
                        Brush_Colour=int((Brush_Position_X/Frame__Width/.0845))

    # Canvas Rectangle:
    cv2.rectangle(Frame,(Canvas_Top_Left_X,Canvas_Top_Left_Y),(Canvas_Bottom_Right_X,Canvas_Bottom_Right_Y),White,Border_Thickness) 

    # Brush Sizes Rectangles:
    for i in range (0,6,1):
        j=int((Frame_Height*.1)+(Frame_Height*.130*i))
        cv2.rectangle(Frame,(int(Frame__Width*.93),j),(Frame__Width,int(j+Frame_Height*.130)),White,Border_Thickness)

    # Brush Sizes:
    for i in range (0,6,1):
        j=int((Frame_Height*.165)+(Frame_Height*.13*i))
        cv2.circle(Frame,(int(Frame__Width*.965),j),Brush_Radius*(i+1),White,Solid)

    # Colour Pallet Rectangles:
    for i in range (0,11,1):
        cv2.rectangle(Frame,(int(Frame__Width*.0845*i),0),(int(Frame__Width*.0845*(i+1)),int(Frame_Height*.1)),Colour_Pallet[i],Solid)
        cv2.rectangle(Frame,(int(Frame__Width*.0845*i),0),(int(Frame__Width*.0845*(i+1)),int(Frame_Height*.1)),White,Border_Thickness)
    cv2.putText(Frame,'Rubber',(int(Frame__Width*.855),int(Frame_Height*.058)),Font,Frame_Height*.001,White,Text_Thickness)
    cv2.putText(Frame,Brush_Status[Draw_Boolean],(int(Frame__Width*.25),int(Frame_Height*.935)),Font,Frame_Height*.001,White,Text_Thickness)

    # Lower Text:
    cv2.putText(Frame,'Q to Quit',(int(Frame__Width*.45),int(Frame_Height*.935)),Font,Frame_Height*.001,White,Text_Thickness)
    cv2.putText(Frame,'C to Clear',(int(Frame__Width*.65),int(Frame_Height*.935)),Font,Frame_Height*.001,White,Text_Thickness)
    cv2.putText(Frame,'S to Save',(int(Frame__Width*.80),int(Frame_Height*.935)),Font,Frame_Height*.001,White,Text_Thickness)
    cv2.putText(Frame,str(int(fpsFilt))+' FPS',(int(Frame__Width*.05),int(Frame_Height*.935)),Font,Frame_Height*.001,White,Text_Thickness)
    cv2.rectangle(Frame,(int(Frame__Width*.001),int(Frame_Height*.88),int(Frame__Width*.929),int(Frame_Height*.092)),White,Border_Thickness)
    cv2.rectangle(Frame,(int(Frame__Width*0.93),int(Frame_Height*.88),int(Frame__Width*.929),int(Frame_Height*.092)),White,Border_Thickness)

    # Final Display:
    Final_Display=cv2.addWeighted(Frame,.8,Canvas,1,0)
    cv2.circle(Final_Display,(Brush_Position_X,Brush_Position_Y),Brush_Radius*Real_Brush,Colour_Pallet[Brush_Colour],Solid)
    cv2.circle(Final_Display,(Brush_Position_X,Brush_Position_Y),Brush_Radius*Real_Brush,White,Indicator_Thickness)
    cv2.resizeWindow('OpenCv2_Paint',Frame__Width,Frame_Height)
    cv2.moveWindow('OpenCv2_Paint',0,-20)
    cv2.imshow('OpenCv2_Paint', Final_Display)
    Pressed_Key = cv2.waitKey(1) & 0xFF

    # P To Play:
    if Pressed_Key == ord('p'): 
        Canvas=numpy.zeros([Frame_Height,Frame__Width,3],dtype=numpy.uint8)
        Brush_Colour=10
        Play = True

    # Q To Quit:
    if Pressed_Key == ord('q'): 
        End_Credits=True

    # End Credits:
    if End_Credits==True:
        Canvas=numpy.zeros([Frame_Height,Frame__Width,3],dtype=numpy.uint8)
        cv2.putText(Canvas,'Thanks For Playing',(int(Frame__Width*.041),int(Frame_Height*Text_Height_Zero)),Font,Frame_Height*.005,White,Text_Thickness*16)
        cv2.putText(Canvas,'Thanks For Playing',(int(Frame__Width*.041),int(Frame_Height*Text_Height_Zero)),Font,Frame_Height*.005,Blue,Text_Thickness*12)
        cv2.putText(Canvas,'Thanks For Playing',(int(Frame__Width*.041),int(Frame_Height*Text_Height_Zero)),Font,Frame_Height*.005,Green,Text_Thickness*8)
        Text_Height_Zero=Text_Height_Zero-.01
    if Text_Height_Zero<=.75:
        cv2.putText(Canvas,'OpenCv2 Paint',(int(Frame__Width*.041),int(Frame_Height*Text_Height_One)),Font,Frame_Height*.006,White,Text_Thickness*16)
        cv2.putText(Canvas,'OpenCv2 Paint',(int(Frame__Width*.041),int(Frame_Height*Text_Height_One)),Font,Frame_Height*.006,Yellow,Text_Thickness*12)
        cv2.putText(Canvas,'OpenCv2 Paint',(int(Frame__Width*.041),int(Frame_Height*Text_Height_One)),Font,Frame_Height*.006,Red,Text_Thickness*8)
        Text_Height_One=Text_Height_One-.01
    if Text_Height_One<=.5:
        cv2.putText(Canvas,'Produced By',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Two)),Font,Frame_Height*.003,Green,Text_Thickness*4)
        cv2.putText(Canvas,'Produced By',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Two)),Font,Frame_Height*.003,Blue,Text_Thickness*2)
        Text_Height_Two=Text_Height_Two-.01
    if Text_Height_Two<=.85:
        cv2.putText(Canvas,'BigBogeyFace',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Three)),Font,Frame_Height*.003,Green,Text_Thickness*4)
        cv2.putText(Canvas,'BigBogeyFace',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Three)),Font,Frame_Height*.003,Red,Text_Thickness*2)
        Text_Height_Three=Text_Height_Three-.01
    if Text_Height_Three<=.85:
        cv2.putText(Canvas,'In Collaboration With',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Four)),Font,Frame_Height*.003,Blue,Text_Thickness*4)
        cv2.putText(Canvas,'In Collaboration With',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Four)),Font,Frame_Height*.003,Green,Text_Thickness*2)
        Text_Height_Four=Text_Height_Four-.01
    if Text_Height_Four<=.85:
        cv2.putText(Canvas,'Keith Lohmeyer',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Five)),Font,Frame_Height*.003,Red,Text_Thickness*4)
        cv2.putText(Canvas,'Keith Lohmeyer',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Five)),Font,Frame_Height*.003,Brown,Text_Thickness*2)
        Text_Height_Five=Text_Height_Five-.01
    if Text_Height_Five<=.5:
        cv2.putText(Canvas,'Many Thanks To',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Six)),Font,Frame_Height*.003,Blue,Text_Thickness*4)
        cv2.putText(Canvas,'Many Thanks To',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Six)),Font,Frame_Height*.003,Red,Text_Thickness*2)
        Text_Height_Six=Text_Height_Six-.01
    if Text_Height_Six<=.85:
        cv2.putText(Canvas,'Mr Paul McWhorter',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Seven)),Font,Frame_Height*.003,Blue,Text_Thickness*4)
        cv2.putText(Canvas,'Mr Paul McWhorter',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Seven)),Font,Frame_Height*.003,Green,Text_Thickness*2)
        Text_Height_Seven=Text_Height_Seven-.01
    if Text_Height_Seven<=.85:
        cv2.putText(Canvas,'For His Most Excellent',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Eight)),Font,Frame_Height*.003,Red,Text_Thickness*4)
        cv2.putText(Canvas,'For His Most Excellent',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Eight)),Font,Frame_Height*.003,Green,Text_Thickness*2)
        Text_Height_Eight=Text_Height_Eight-.01
    if Text_Height_Eight<=.85:
        cv2.putText(Canvas,'Series Of YouTube Tutorials',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Nine)),Font,Frame_Height*.003,Green,Text_Thickness*4)
        cv2.putText(Canvas,'Series Of YouTube Tutorials',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Nine)),Font,Frame_Height*.003,Blue,Text_Thickness*2)
        Text_Height_Nine=Text_Height_Nine-.01
    if Text_Height_Nine<=.5:
        cv2.putText(Canvas,'This Code Is Available',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Ten)),Font,Frame_Height*.003,Red,Text_Thickness*4)
        cv2.putText(Canvas,'This Code Is Available',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Ten)),Font,Frame_Height*.003,Yellow,Text_Thickness*2)
        Text_Height_Ten=Text_Height_Ten-.01
    if Text_Height_Ten<=.85:
        cv2.putText(Canvas,'From My GitHub Repository',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Eleven)),Font,Frame_Height*.003,Red,Text_Thickness*4)
        cv2.putText(Canvas,'From My GitHub Repository',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Eleven)),Font,Frame_Height*.003,Blue,Text_Thickness*2)
        Text_Height_Eleven=Text_Height_Eleven-.01
    if Text_Height_Eleven<=.85:
        cv2.putText(Canvas,'https://github.com/BigBogeyFace/BigBogeyFace',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Twelve)),Font,Frame_Height*.001,Blue,Text_Thickness*3)
        cv2.putText(Canvas,'https://github.com/BigBogeyFace/BigBogeyFace',(int(Frame__Width*.141),int(Frame_Height*Text_Height_Twelve)),Font,Frame_Height*.001,Yellow,Text_Thickness*1)
        Text_Height_Twelve=Text_Height_Twelve-.01
    if Text_Height_Twelve<=.5:
        Text_Height_Twelve=.5
    if Text_Height_Eleven<=-.1:
        GameOver=True
    if GameOver==True:
        break

    # C To Clear:
    elif Pressed_Key == ord('c'):
        Canvas=numpy.zeros([Frame_Height,Frame__Width,3],dtype=numpy.uint8)
        Brush_Colour=10

    # S To Save:
    elif Pressed_Key == ord('s'):
        if not os.path.isdir('Drawings'):
            os.mkdir('Drawings')
        fn='drawings/Canvas'+str(int(time.time()))+'.jpg'
        cv2.imwrite(fn,Canvas)
Camera.release()



















# Many Thanks To Mr Paul McWhorter For His Most Excellent YouTube Tutorials.
# Please Check The Description Below For A Link To His Channel.
# Like And Subscribe For More Content...
