# Shop Activity Footage Analyser By BigBogeyFace

# Import Modules:
import cv2
import numpy
import time

# Frame Setup:
Frame_Width = 1280
Frame_Height = 720

# Camera Setup:
Camera = cv2.VideoCapture(0, cv2.CAP_DSHOW)
Camera.set(cv2.CAP_PROP_FRAME_WIDTH, Frame_Width)
Camera.set(cv2.CAP_PROP_FRAME_HEIGHT, Frame_Height)
Camera.set(cv2.CAP_PROP_FPS, 30)

# Mouse Initialisers:
evt = 0
pntX1 = 0
pntY1 = 0
pntX2 = 0
pntY2 = 0

# Mouse Functions:
def MouseClick(event, xPos, yPos, flags, perameters):
    global evt
    global pntX1
    global pntY1    
    global pntX2
    global pntY2
    if event == cv2.EVENT_LBUTTONDOWN: # 1
        pntX1 = (xPos)
        pntY1 = (yPos)
        evt = event
    if event == cv2.EVENT_LBUTTONUP: # 4
        pntX2 = (xPos)
        pntY2 = (yPos)
        evt = event

# Initialise Mouse Call:
cv2.namedWindow('Shop_Activity_Analyser')
cv2.setMouseCallback('Shop_Activity_Analyser', MouseClick)

# Class:
class MediaPipe_Bodies:
    import mediapipe
    def __init__(self):
        self.pose = self.mediapipe.solutions.pose.Pose(False, False, True, .5, .5)

    # Method:
    def Marks(self, Frame):
        LandMarks = []
        FrameRGB = cv2.cvtColor(Frame, cv2.COLOR_BGR2RGB)
        Results = self.pose.process(FrameRGB)
        if Results.pose_landmarks != None:
            for lm in Results.pose_landmarks.landmark:
                LandMarks.append((int(lm.x * Frame_Width),int(lm.y * Frame_Height)))
            return LandMarks
Find_Bodies = MediaPipe_Bodies()

# Frames Per Second Display Perameters:
Font_Size = .5
Font_Size_Small = .4
Font_Thickness = 1
Font_Title = cv2.FONT_HERSHEY_TRIPLEX
Font = cv2.FONT_HERSHEY_SIMPLEX
LineThickness = 3
Weighted_Colour = (100, 0, 0)

# Colours:
Red = (0, 0, 255)
Green = (0, 255, 0)
Blue = (255, 0, 0)
Cyan = (255, 255, 0)
Purple = (255, 0, 255)
Yellow = (0, 255, 255)
White = (255, 255, 255)
Black = (0, 0, 0)

# Initialisation:
Start = False
Roi_Created = False
Roi_Activated = False
Roi_Activity = False
No_More_Clicks = False
Location = "SuperMarket"
Isle_Number = "7"
Activity = 0
Activity_Start = 70
Activity_Time = 0
Last_Activity_Time = 0
Total_Activity_Time = 0
Activity_Number = 0
Average_Time = 0
Show_Average = 0 
Old_Time = 0
Seconds_Elapsed = 0
Minutes_Elapsed = 0
Hours_Elapsed = 0

# Collect Video File:
File_Object = cv2.VideoCapture('Shopping Center - 12876.mp4')

# Begin Program Loop:
while True:
    
    # Key Presses:
    Pressed_Key = cv2.waitKey(1) & 0xFF

    # Collect Time:
    Real_Time = time.localtime(time.time())
    Year = Real_Time[0]        
    Month = Real_Time[1]
    Day = Real_Time[2]
    Hour = Real_Time[3]
    Minute = Real_Time[4]
    Second  = Real_Time[5]

    # Read Frame From Object:
    Read_Counter , Frame = File_Object.read()
    Frame_Resized = cv2.resize(Frame, (Frame_Width, Frame_Height))
    cv2.rectangle(Frame, (0, 0), (Frame_Width, Frame_Height), (255, 255, 255), 5)
    Gray_Frame = cv2.cvtColor(Frame, cv2.COLOR_BGR2GRAY)
    Was_Gray_Frame_First = cv2.cvtColor(Gray_Frame, cv2.COLOR_GRAY2BGR)
    Text_BackGround = numpy.zeros([Frame_Height, Frame_Width, 3], dtype = numpy.uint8)
    cv2.rectangle(Text_BackGround, (0, 0), (int(Frame_Width * .18), Frame_Height), (Weighted_Colour), -1)

    # Generate Final Display:
    Was_Gray_Frame = cv2.addWeighted(Was_Gray_Frame_First, .5, Text_BackGround, 1, 1)

    # Intro Screen:
    if Start == False:
        Roi = []
        Roi_Created = False
        Roi_Activated = False
        cv2.putText(Was_Gray_Frame, "Shop Activity Analyser:", (int(Frame_Width * .01), int(Frame_Height * .04)), Font_Title, Font_Size, White, Font_Thickness)
        cv2.putText(Was_Gray_Frame, "Press S To Start", (int(Frame_Width * .01), int(Frame_Height * .88)), Font_Title, Font_Size_Small, White, Font_Thickness)
        if  Pressed_Key == ord('s'): 
            Start = True

    # Setup Screen:
    if Start == True and Roi_Activated == False:
        cv2.putText(Was_Gray_Frame, "Please Select The", (int(Frame_Width * .01), int(Frame_Height * .04)), Font_Title, Font_Size, White, Font_Thickness)
        cv2.putText(Was_Gray_Frame, "Region Of Interest", (int(Frame_Width * .01), int(Frame_Height * .08)), Font_Title, Font_Size, White, Font_Thickness)
        if  evt == 1:
            Roi_Created=False
        if  evt == 4:
            Roi_Created = True
            Roi = Frame[pntY1 : pntY2, pntX1 : pntX2]
            Was_Gray_Frame [pntY1 : pntY2, pntX1 : pntX2] = Roi
            cv2.rectangle(Was_Gray_Frame, (pntX1, pntY1), (pntX2, pntY2), (Green), LineThickness)

    # Get Roi, Place In Display Frame:
    if Start == True and Roi_Created == True:
            if  evt == 1:
                Start = False
            Roi = Frame[pntY1 : pntY2, pntX1 : pntX2]
            Was_Gray_Frame [pntY1 : pntY2, pntX1 : pntX2] = Roi

    # Confirmation Screen:
    if Start == True and Roi_Created == True and Roi_Activated == False:
        cv2.putText(Was_Gray_Frame,"Press A To Activate",(int(Frame_Width*.01),int(Frame_Height*.88)),Font_Title,Font_Size_Small,White,Font_Thickness)
        Start_Year=Real_Time[0]        
        Start_Month=Real_Time[1]
        Start_Day=Real_Time[2]
        Start_Hour=Real_Time[3]
        Start_Minute=Real_Time[4]
        Start_Second=Real_Time[5]
        if  Pressed_Key == ord('a'): 
            Roi_Activated = True

    # Working Screen:
    if Start == True and Roi_Created == True and Roi_Activated == True:
        cv2.putText(Was_Gray_Frame,"Shop Activity Analyser: ",(int(Frame_Width*.01),int(Frame_Height*.04)),Font_Title,Font_Size,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Details: ",(int(Frame_Width*.01),int(Frame_Height*.12)),Font_Title,Font_Size,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Location: "+(Location),(int(Frame_Width*.01),int(Frame_Height*.16)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Isle Number: "+(Isle_Number),(int(Frame_Width*.01),int(Frame_Height*.20)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Time: ",(int(Frame_Width*.01),int(Frame_Height*.28)),Font_Title,Font_Size,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Start Date: "+str(Start_Day)+"-"+str(Start_Month)+"-"+str(Start_Year),(int(Frame_Width*.01),int(Frame_Height*.32)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Start Time: "+str(Start_Hour)+":"+str(Start_Minute)+":"+str(Start_Second),(int(Frame_Width*.01),int(Frame_Height*.36)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Current Date: "+str(Day)+"-"+str(Month)+"-"+str(Year),(int(Frame_Width*.01),int(Frame_Height*.40)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Current Time: "+str(Hour)+":"+str(Minute)+":"+str(Second),(int(Frame_Width*.01),int(Frame_Height*.44)),Font,Font_Size_Small,White,Font_Thickness)

        # Elapsed Time Calculation:
        New_Time = Second
        if New_Time!=Old_Time:
            Seconds_Elapsed=Seconds_Elapsed+1
            Old_Time=New_Time
        if Seconds_Elapsed==60:
            Minutes_Elapsed=Minutes_Elapsed+1
            Seconds_Elapsed=0
        if Minutes_Elapsed==60:
            Hours_Elapsed=Hours_Elapsed+1
            Minutes_Elapsed=0

        # Display Data:
        cv2.putText(Was_Gray_Frame,"Time Elapsed: "+str(Hours_Elapsed)+":"+str(Minutes_Elapsed)+":"+str(Seconds_Elapsed),(int(Frame_Width*.01),int(Frame_Height*.48)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Activity: ",(int(Frame_Width*.01),int(Frame_Height*.56)),Font_Title,Font_Size,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Activity Count: "+str(Activity_Number),(int(Frame_Width*.01),int(Frame_Height*.64)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Activity Timer (Secs): "+str(Activity_Time),(int(Frame_Width*.01),int(Frame_Height*.68)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Last Activity Time (Secs): "+str(Last_Activity_Time),(int(Frame_Width*.01),int(Frame_Height*.72)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Total Activity Time (Secs): "+str(Total_Activity_Time),(int(Frame_Width*.01),int(Frame_Height*.76)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Average Activity Time (Secs): "+str(Average_Time),(int(Frame_Width*.01),int(Frame_Height*.80)),Font,Font_Size_Small,White,Font_Thickness)
        cv2.putText(Was_Gray_Frame,"Press R To Reset",(int(Frame_Width*.01),int(Frame_Height*.88)),Font_Title,Font_Size_Small,White,Font_Thickness)

        # Check For Bodies:
        Bodies_Data=Find_Bodies.Marks(Roi)
        if  Bodies_Data != None:
            cv2.putText(Was_Gray_Frame,"Status: ",(int(Frame_Width*.01),int(Frame_Height*.60)),Font,Font_Size_Small,White,Font_Thickness)
            cv2.putText(Was_Gray_Frame,"Activity",(int(Frame_Width*.05),int(Frame_Height*.60)),Font_Title,Font_Size_Small,Red,Font_Thickness)
            cv2.rectangle(Was_Gray_Frame,(pntX1,pntY1),(pntX2,pntY2),(Red),LineThickness)
            if Activity==0:
                Activity_Number = Activity_Number + 1
                Activity=1
            if Activity_Start != Second:
                Activity_Time=Activity_Time+1
                Activity_Start=Second
        else:
            cv2.putText(Was_Gray_Frame,"Status: ",(int(Frame_Width*.01),int(Frame_Height*.60)),Font,Font_Size_Small,White,Font_Thickness)
            cv2.putText(Was_Gray_Frame,"No Activity",(int(Frame_Width*.05),int(Frame_Height*.60)),Font_Title,Font_Size_Small,Green,Font_Thickness)
            cv2.rectangle(Was_Gray_Frame,(pntX1,pntY1),(pntX2,pntY2),(Green),LineThickness)
            Activity=0
            if Activity_Time > 0:
                Last_Activity_Time=Activity_Time
                Total_Activity_Time=Total_Activity_Time+Activity_Time
                Average_Time=int(Total_Activity_Time/Activity_Number)
            Activity_Time=0

    # Reset To Start Screen
    if Pressed_Key == ord('r'): 
        Roi = []
        Start = False

    # Quit Prompt:
    cv2.putText(Was_Gray_Frame,"Press Q To Quit",(int(Frame_Width*.01),int(Frame_Height*.92)),Font_Title,Font_Size_Small,White,Font_Thickness)
    if Pressed_Key == ord('q'):
        break

    # Display frame:
    cv2.imshow('Shop_Activity_Analyser',Was_Gray_Frame)
    cv2.moveWindow('Shop_Activity_Analyser',0,0)

    # Set Playback Speed:
    time.sleep(.02)

# Clean Finish:
Camera.release()
